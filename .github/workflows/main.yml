name: 자동 빌드 & 릴리스

on:
  push:

permissions:
  contents: write

jobs:
  Windows-Build:
    name: Windows 빌드
    runs-on: windows-latest
    steps:
      # 1. 코드 체크아웃
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      # 2. Python 환경 설정
      - name: Python 환경 구축
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. 의존성 설치
      - name: 라이브러리 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. PyInstaller로 실행 파일 빌드
      - name: 실행 파일 빌드
        shell: bash
        run: pyinstaller --onefile --windowed --noconsole --add-data web:web --icon icon.ico --upx-dir upx main.py

      # 5. 빌드 결과를 artifacts 디렉터리에 이동동
      - name: 실행 파일 이동
        shell: bash
        run: mv ./dist/main.exe artifacts/main-windows.exe

      # 6. Artifacts 업로드
      - name: 첨부파일 업로드
        uses: actions/upload-artifact@v4
        with:
          name: Windows-build
          path: artifacts/main-windows.exe

  macOS-Build:
    name: macOS Build
    runs-on: macos-latest
    steps:
      # 1. 코드 체크아웃
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      # 2. Python 환경 설정
      - name: Python 환경 구축
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. 의존성 설치
      - name: 라이브러리 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. PyInstaller로 실행 파일 빌드
      - name: 실행 파일 빌드
        shell: bash
        run: pyinstaller --onefile --windowed --noconsole --add-data web:web --icon icon.ico main.py

      # 5. 빌드 결과를 artifacts 디렉터리에 이동동 및 압축
      - name: 실행 파일 이동 및 압축축
        shell: bash
        run: zip -j artifacts/main-macos.zip dist/*

      # 6. 첨부파일 업로드
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build
          path: artifacts/main-macos.zip

  # 릴리스 생성
  create-release:
    name: 릴리스 생성
    needs: ['Windows-Build', 'macOS-Build']
    runs-on: ubuntu-latest
    steps:
      # 첨부파일 다운로드 (Windows)
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: Windows-build
          path: artifacts/windows

      # 첨부파일 다운로드 (macOS)
      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-build
          path: artifacts/macos

      # 7. 자동 태그 생성 및 릴리스 생성
      - name: 자동 태그 생성 및 릴리스 생성
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # 현재 시간 기반 태그 생성
          version=$(date +%Y%m%d-%H%M%S)
          tag="v$version"

          # 태그 푸시
          git tag $tag
          git push origin $tag

          # Release 생성 (Windows 및 macOS 파일 모두 업로드)
          gh release create "$tag" \
            --title "Release: $version" \
            --notes "Automatically generated release for Windows and macOS." \
            artifacts/windows/main-windows.exe \
            artifacts/macos/main-macos.zip

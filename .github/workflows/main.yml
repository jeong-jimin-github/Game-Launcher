name: Automated Release

on:
  push:  # 모든 Push 이벤트에서 실행

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release Executable
    runs-on: ubuntu-latest  # 단일 러너에서 실행 (여러 OS에서 병렬 빌드 후 단일 릴리스)
    strategy:
      matrix:
        os: [windows-latest, macos-latest]  # 빌드 환경 정의
    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. 의존성 설치
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. PyInstaller로 실행 파일 빌드 (OS 구분)
      - name: Build Executable
        shell: bash
        run: |
          echo "Running on ${{ matrix.os }}"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            pyinstaller --onefile --windowed --noconsole --add-data web:web --icon icon.ico --upx-dir upx main.py
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            pyinstaller --onefile --windowed --noconsole --add-data web:web --upx-dir upx main.py
          fi

      # 5. 빌드 결과를 artifacts 디렉터리에 복사 및 압축 (OS 구분)
      - name: Archive and Compress Executable
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv dist/main.exe artifacts/main-windows.exe
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            # .app 폴더를 zip으로 압축
            cd dist
            zip -r ../artifacts/main-macos.zip main.app
            cd ..
          fi

      # 6. Artifacts 업로드 (각 OS 빌드 결과)
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-build
          path: artifacts/

  # 릴리스 생성 (별도 job으로 분리)
  create-release:
    name: Create Release
    needs: build-and-release  # 이전 빌드 작업 완료 후 실행
    runs-on: ubuntu-latest
    steps:
      # Artifacts 다운로드 (Windows)
      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-build
          path: artifacts/windows

      # Artifacts 다운로드 (macOS)
      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-build
          path: artifacts/macos

      # 7. 자동 태그 생성 및 릴리스 생성
      - name: Create Release and Upload Executables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # 현재 시간 기반 태그 생성
          version=$(date +%Y%m%d-%H%M%S)
          tag="v$version"

          # 태그 푸시
          git tag $tag
          git push origin $tag

          # Release 생성 (Windows 및 macOS 파일 모두 업로드)
          gh release create "$tag" \
            --title "Release: $version" \
            --notes "Automatically generated release for Windows and macOS." \
            artifacts/windows/main-windows.exe \
            artifacts/macos/main-macos.zip
